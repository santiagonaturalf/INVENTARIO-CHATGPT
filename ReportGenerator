<!DOCTYPE html>
<html>
<head>
    <base target="_top">
    <link rel="stylesheet" href="https://ssl.gstatic.com/docs/script/css/add-ons1.css">
    <style>
        body { padding: 10px; font-family: Arial, sans-serif; }
        h2 { color: #4285F4; }
        #loading, #error, #success { margin-top: 15px; text-align: center; }
        #error { color: red; }
        #success { color: green; }
        #search-box { width: 100%; padding: 8px; box-sizing: border-box; }
        .search-container { position: relative; margin-bottom: 10px; }
        .autocomplete-suggestions { position: absolute; border: 1px solid #ddd; border-top: none; z-index: 99; top: 100%; left: 0; right: 0; background-color: white; max-height: 150px; overflow-y: auto; }
        .suggestion-item { padding: 8px; cursor: pointer; }
        .suggestion-item:hover { background-color: #e9e9e9; }
        .table-container { max-height: 380px; overflow-y: auto; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; vertical-align: top; }
        th { background-color: #f2f2f2; }
        .order-row { cursor: pointer; }
        .order-row:hover { background-color: #f5f5f5; }
        .product-details { display: none; }
        .product-details-content { padding: 15px; background-color: #fafafa; }
        .button-container { margin-top: 20px; text-align: right; }
        .product-table { width: 100%; margin-top: 10px; border-collapse: collapse; }
        .product-table th, .product-table td { border: 1px solid #eee; padding: 6px; text-align: left; }
        .product-table th { background-color: #f8f8f8; }
        .product-table .product-name-input { width: 95%; box-sizing: border-box; }
        .product-table .product-quantity-input { width: 70px; box-sizing: border-box; }
    </style>
</head>
<body>
    <h2>Generador de Reportes de Clientes</h2>

    <div id="loading">Cargando datos...</div>
    <div id="error" style="display: none;"></div>
    <div id="success" style="display: none;"></div>

    <div id="main-content" style="display: none;">
        <div class="search-container">
            <input type="text" id="search-box" placeholder="Buscar por Nº Pedido, Cliente o Producto...">
            <div class="autocomplete-suggestions" id="suggestions-box" style="display: none;"></div>
        </div>

        <div class="table-container">
            <table id="orders-table">
                <thead>
                    <tr>
                        <th><input type="checkbox" id="select-all-checkbox"></th>
                        <th>Nº Pedido</th>
                        <th>Nombre Cliente</th>
                        <th>Teléfono</th>
                        <th>Email</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Las filas de los pedidos se insertarán aquí -->
                </tbody>
            </table>
        </div>

        <div class="button-container">
            <button id="save-button" class="action">Guardar Reporte</button>
        </div>
    </div>

    <div id="reported-clients-container" style="display: none; margin-top: 30px;">
        <h2>Clientes Reportados</h2>
        <div class="table-container">
            <table id="reported-clients-table">
                <thead>
                    <tr>
                        <th><input type="checkbox" id="select-all-reported-checkbox"></th>
                        <th>Fecha Reporte</th>
                        <th>Nº Pedido</th>
                        <th>Nombre Cliente</th>
                        <th>Teléfono</th>
                        <th>Email</th>
                        <th>Producto</th>
                        <th>Cantidad</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Las filas de los clientes reportados se insertarán aquí -->
                </tbody>
            </table>
        </div>
    </div>

    <div id="message-generator-container" style="margin-top: 20px; display: none;">
        <button id="generate-message-button" class="action">Generar Mensaje</button>
        <button id="send-whatsapp-button" class="action" style="margin-left: 10px;">Enviar por WhatsApp</button>
        <textarea id="message-output-area" rows="12" style="width: 100%; margin-top: 10px; font-family: Arial, sans-serif; box-sizing: border-box;"></textarea>
    </div>

    <script>
        let allOrdersData = [];
        let allSearchTerms = new Set();
        const tableBody = document.querySelector("#orders-table tbody");
        const searchBox = document.getElementById('search-box');
        const suggestionsBox = document.getElementById('suggestions-box');

        window.onload = function() {
            showLoading('Cargando datos...');
            google.script.run
                .withSuccessHandler(onDataLoaded)
                .withFailureHandler(onFailure)
                .getSalesDataForReporting();
            
            google.script.run
                .withSuccessHandler(onReportedDataLoaded)
                .withFailureHandler(onFailure)
                .getReportedClientsData();
        };

        function onDataLoaded(data) {
            if (data.error) {
                onFailure({ message: data.error });
                return;
            }
            allOrdersData = data;
            // Populate search terms
            allOrdersData.forEach(order => {
                allSearchTerms.add(order.orderId);
                allSearchTerms.add(order.clientName);
                order.products.forEach(p => allSearchTerms.add(p.productName));
            });
            renderTable(allOrdersData, "");
            document.getElementById('loading').style.display = 'none';
            document.getElementById('main-content').style.display = 'block';
        }

        function renderTable(orders, searchTerm = "") {
            tableBody.innerHTML = ""; // Limpiar tabla
            if (orders.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="5" style="text-align:center;">No se encontraron pedidos.</td></tr>';
                return;
            }
            orders.forEach(order => {
                let orderShouldBeChecked = false;

                const productRow = document.createElement('tr');
                productRow.className = 'product-details';
                productRow.dataset.orderId = order.orderId;

                let productHtml = '<td colspan="5"><div class="product-details-content"><h4>Productos del Pedido</h4>' +
                                  '<table class="product-table"><thead><tr>' +
                                  '<th style="width: 20px;"></th>' +
                                  '<th>Nombre Producto</th>' +
                                  '<th>Cantidad</th>' +
                                  '</tr></thead><tbody>';

                order.products.forEach((product, index) => {
                    const productMatches = searchTerm && String(product.productName).toLowerCase().includes(searchTerm);
                    if (productMatches) {
                        orderShouldBeChecked = true;
                    }
                    productHtml += `
                        <tr class="product-item">
                            <td><input type="checkbox" class="product-checkbox" data-product-index="${index}" ${productMatches ? 'checked' : ''}></td>
                            <td><input type="text" class="product-name-input" value="${product.productName}"></td>
                            <td><input type="number" class="product-quantity-input" value="${product.quantity}"></td>
                        </tr>
                    `;
                });
                productHtml += '</tbody></table></div></td>';
                productRow.innerHTML = productHtml;

                const row = document.createElement('tr');
                row.className = 'order-row';
                row.dataset.orderId = order.orderId;
                row.innerHTML = `
                    <td><input type="checkbox" class="order-checkbox" name="selectedOrder" value="${order.orderId}" ${orderShouldBeChecked ? 'checked' : ''}></td>
                    <td>${order.orderId}</td>
                    <td>${order.clientName}</td>
                    <td>${order.phone}</td>
                    <td>${order.email}</td>
                `;

                tableBody.appendChild(row);
                tableBody.appendChild(productRow);
            });
        }

        document.getElementById('select-all-checkbox').addEventListener('change', function(e) {
            const checkboxes = tableBody.querySelectorAll('.order-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = e.target.checked;
            });
        });

        tableBody.addEventListener('click', function(e) {
            const row = e.target.closest('.order-row');
            if (row && !e.target.matches('input[type="checkbox"]')) {
                const productDetails = row.nextElementSibling;
                if (productDetails && productDetails.classList.contains('product-details')) {
                    productDetails.style.display = productDetails.style.display === 'table-row' ? 'none' : 'table-row';
                }
            }
        });

        tableBody.addEventListener('change', function(e) {
            // Uncheck all products if an order is unchecked
            if (e.target.classList.contains('order-checkbox') && !e.target.checked) {
                const orderId = e.target.value;
                const productDetailsRow = document.querySelector(`.product-details[data-order-id="${orderId}"]`);
                const productCheckboxes = productDetailsRow.querySelectorAll('.product-checkbox');
                productCheckboxes.forEach(pc => pc.checked = false);
            }

            // Check parent order if a product is checked
            if (e.target.classList.contains('product-checkbox') && e.target.checked) {
                const productDetailsRow = e.target.closest('.product-details');
                const orderId = productDetailsRow.dataset.orderId;
                const orderCheckbox = document.querySelector(`.order-checkbox[value="${orderId}"]`);
                if (orderCheckbox) {
                    orderCheckbox.checked = true;
                }
            }
        });

        searchBox.addEventListener('input', function(e) {
            const searchTerm = e.target.value;
            filterTable(searchTerm);
            showSuggestions(searchTerm);
        });

        function showSuggestions(term) {
            suggestionsBox.innerHTML = '';
            if (term.length === 0) {
                suggestionsBox.style.display = 'none';
                return;
            }
            const lowerCaseTerm = term.toLowerCase();
            const matchingTerms = [...allSearchTerms].filter(st => st && String(st).toLowerCase().includes(lowerCaseTerm));

            if (matchingTerms.length > 0) {
                matchingTerms.slice(0, 10).forEach(suggestion => { // Limit to 10 suggestions
                    const div = document.createElement('div');
                    div.textContent = suggestion;
                    div.className = 'suggestion-item';
                    suggestionsBox.appendChild(div);
                });
                suggestionsBox.style.display = 'block';
            } else {
                suggestionsBox.style.display = 'none';
            }
        }

        suggestionsBox.addEventListener('click', function(e) {
            if (e.target.classList.contains('suggestion-item')) {
                const selectedTerm = e.target.textContent;
                searchBox.value = selectedTerm;
                filterTable(selectedTerm);
                suggestionsBox.style.display = 'none';
            }
        });

        document.addEventListener('click', function(e) {
            if (!e.target.closest('.search-container')) {
                suggestionsBox.style.display = 'none';
            }
        });

        function filterTable(searchTerm) {
            const lowerCaseSearchTerm = searchTerm.toLowerCase();
            const filteredOrders = allOrdersData.filter(order => {
                const hasMatchingProduct = order.products.some(p => String(p.productName).toLowerCase().includes(lowerCaseSearchTerm));
                return String(order.orderId).toLowerCase().includes(lowerCaseSearchTerm) ||
                       String(order.clientName).toLowerCase().includes(lowerCaseSearchTerm) ||
                       hasMatchingProduct;
            });
            renderTable(filteredOrders, lowerCaseSearchTerm);
        }

        document.getElementById('save-button').addEventListener('click', function() {
            console.log("--- Save button clicked ---");
            const selectedOrderCheckboxes = document.querySelectorAll('input[name="selectedOrder"]:checked');
            console.log(`Found ${selectedOrderCheckboxes.length} selected order checkboxes.`);

            if (selectedOrderCheckboxes.length === 0) {
                showError('Por favor, seleccione al menos un pedido de la lista.');
                return;
            }

            const reports = [];
            const errorMessages = [];

            selectedOrderCheckboxes.forEach(checkbox => {
                const orderId = checkbox.value;
                console.log(`Processing orderId: ${orderId}`);
                const originalOrderData = allOrdersData.find(o => String(o.orderId) === orderId);
                const productDetailsRow = document.querySelector(`.product-details[data-order-id="${orderId}"]`);
                const productItems = productDetailsRow.querySelectorAll('.product-item');
                console.log(`Found ${productItems.length} product items for order ${orderId}.`);

                const selectedProducts = [];
                productItems.forEach(item => {
                    const productCheckbox = item.querySelector('input[type="checkbox"]');
                    if (productCheckbox.checked) {
                        const nameInput = item.querySelector('.product-name-input');
                        const quantityInput = item.querySelector('.product-quantity-input');
                        const productName = nameInput.value;
                        const quantity = parseFloat(quantityInput.value) || 0;
                        console.log(`-- Found selected product: ${productName}, Quantity: ${quantity}`);
                        selectedProducts.push({ productName, quantity });
                    }
                });

                if (selectedProducts.length > 0) {
                    console.log(`Order ${orderId} has ${selectedProducts.length} products selected. Adding to report.`);
                    reports.push({
                        orderId: originalOrderData.orderId,
                        clientName: originalOrderData.clientName,
                        phone: originalOrderData.phone,
                        email: originalOrderData.email,
                        products: selectedProducts
                    });
                } else {
                    console.log(`Order ${orderId} has no products selected.`);
                    errorMessages.push(`Para el pedido Nº ${orderId}, no se seleccionó ningún producto.`);
                }
            });

            if (reports.length === 0) {
                const finalErrorMessage = errorMessages.length > 0 ? errorMessages.join(' ') : 'Debe seleccionar al menos un producto en los pedidos seleccionados.';
                console.log(`No reports to save. Error: ${finalErrorMessage}`);
                showError(finalErrorMessage);
                return;
            }

            console.log("Saving reports:", reports);
            showLoading('Guardando reportes...');
            google.script.run
                .withSuccessHandler(onSaveSuccess)
                .withFailureHandler(onFailure)
                .saveReport(reports);
        });

        function onReportedDataLoaded(data) {
            if (data.error) {
                showError("Error al cargar clientes reportados: " + data.error);
                return;
            }
            renderReportedClientsTable(data);
            document.getElementById('reported-clients-container').style.display = 'block';
            document.getElementById('message-generator-container').style.display = 'block';
        }

        function renderReportedClientsTable(reportedClients) {
            const tableBody = document.querySelector("#reported-clients-table tbody");
            tableBody.innerHTML = ""; // Clear existing rows
            if (reportedClients.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="8" style="text-align:center;">No se encontraron clientes reportados.</td></tr>';
                return;
            }

            reportedClients.forEach(client => {
                const row = document.createElement('tr');
                // Use a unique value for the checkbox, like a combination of orderId and productName
                const checkboxValue = `${client.orderId}-${client.productName}`;
                row.innerHTML = `
                    <td><input type="checkbox" class="reported-client-checkbox" value="${checkboxValue}"></td>
                    <td>${client.reportDate}</td>
                    <td>${client.orderId}</td>
                    <td>${client.clientName}</td>
                    <td>${client.phone}</td>
                    <td>${client.email}</td>
                    <td>${client.productName}</td>
                    <td>${client.quantity}</td>
                `;
                tableBody.appendChild(row);
            });
        }

        document.getElementById('select-all-reported-checkbox').addEventListener('change', function(e) {
            const checkboxes = document.querySelectorAll('.reported-client-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = e.target.checked;
            });
        });

        document.getElementById('generate-message-button').addEventListener('click', function() {
            try {
                var selectedCheckboxes = document.querySelectorAll('.reported-client-checkbox:checked');
                var messageOutputArea = document.getElementById('message-output-area');
                
                if (selectedCheckboxes.length === 0) {
                    messageOutputArea.value = 'Por favor, seleccione al menos un cliente reportado para generar el mensaje.';
                    return;
                }

                var allMessages = '';
                var template = '👋 ¡Hola! Te contactamos desde Santiago Natural Food 😊.\n\n' +
                               'Te informamos que lamentablemente no pudimos enviar: \n\n' +
                               'Producto: {productName}\n' +
                               'Cantidad: {quantity}\n' +
                               'Pedido Nº: {orderId}\n\n' +
                               '💳 Para solucionar este inconveniente, Por favor, completa el siguiente formulario para elegir la forma en que deseas tu devolución \n' +
                               '🔗 https://forms.gle/8x3bzfwL2oZyqcou6\n\n' +
                               '🙌 Si tienes cualquier duda o necesitas asistencia adicional, estamos aquí para ayudarte. ¡Gracias por tu comprensión y confianza! 😊';

                for (var i = 0; i < selectedCheckboxes.length; i++) {
                    var row = selectedCheckboxes[i].closest('tr');
                    var cells = row.getElementsByTagName('td');
                    
                    var orderId = cells[2].textContent;
                    var productName = cells[6].textContent;
                    var quantity = cells[7].textContent;

                    var message = template.replace('{productName}', productName)
                                          .replace('{quantity}', quantity)
                                          .replace('{orderId}', orderId);
                    
                    allMessages += message + '\n\n' + '--------------------' + '\n\n';
                }

                messageOutputArea.value = allMessages.trim();
            } catch (e) {
                showError('Error al generar mensaje: ' + e.message);
            }
        });

        document.getElementById('send-whatsapp-button').addEventListener('click', function() {
            try {
                var selectedCheckboxes = document.querySelectorAll('.reported-client-checkbox:checked');

                if (selectedCheckboxes.length !== 1) {
                    alert('Por favor, seleccione una sola fila para enviar un mensaje de WhatsApp.');
                    return;
                }

                var row = selectedCheckboxes[0].closest('tr');
                var cells = row.getElementsByTagName('td');

                var orderId = cells[2].textContent;
                var productName = cells[6].textContent;
                var quantity = cells[7].textContent;
                var phone = cells[4].textContent;

                // Normalize phone number
                phone = phone.replace(/\D/g, ''); // Remove non-digits
                if (phone.length === 9 && phone.startsWith('9')) {
                    phone = '56' + phone;
                } else if (phone.length === 8) {
                    phone = '569' + phone;
                }

                // Final validation
                if (!phone.startsWith('569') || phone.length !== 11) {
                    alert('El número de teléfono "' + cells[4].textContent + '" no parece ser un celular chileno válido. Formato esperado: 569xxxxxxxx.');
                    return;
                }
                
                var template = '👋 ¡Hola! Te contactamos desde Santiago Natural Food 😊.\n\n' +
                               'Te informamos que lamentablemente no pudimos enviar: \n\n' +
                               'Producto: ' + productName + '\n' +
                               'Cantidad: ' + quantity + '\n' +
                               'Pedido Nº: ' + orderId + '\n\n' +
                               '💳 Para solucionar este inconveniente, Por favor, completa el siguiente formulario para elegir la forma en que deseas tu devolución \n' +
                               '🔗 https://forms.gle/8x3bzfwL2oZyqcou6\n\n' +
                               '🙌 Si tienes cualquier duda o necesitas asistencia adicional, estamos aquí para ayudarte. ¡Gracias por tu comprensión y confianza! 😊';

                var encodedText = encodeURIComponent(template);
                var url = 'https://api.whatsapp.com/send?phone=' + phone + '&text=' + encodedText;
                
                window.open(url, '_blank');
            } catch (e) {
                showError('Error al enviar WhatsApp: ' + e.message);
            }
        });

        function onSaveSuccess(response) {
            if (response.success) {
                showSuccess(response.message);
                document.getElementById('search-box').value = '';
                document.getElementById('select-all-checkbox').checked = false;
                renderTable(allOrdersData);
            } else {
                showError(response.message);
            }
        }

        function onFailure(error) {
            showError(`Error: ${error.message}`);
            document.getElementById('loading').style.display = 'none';
        }

        function showLoading(message) {
            const loadingDiv = document.getElementById('loading');
            loadingDiv.textContent = message || 'Cargando...';
            loadingDiv.style.display = 'block';
            document.getElementById('error').style.display = 'none';
            document.getElementById('success').style.display = 'none';
        }

        function showError(message) {
            const errorDiv = document.getElementById('error');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            document.getElementById('loading').style.display = 'none';
            document.getElementById('success').style.display = 'none';
        }

        function showSuccess(message) {
            const successDiv = document.getElementById('success');
            successDiv.textContent = message;
            successDiv.style.display = 'block';
            document.getElementById('loading').style.display = 'none';
            document.getElementById('error').style.display = 'none';
            setTimeout(() => { successDiv.style.display = 'none'; }, 5000);
        }
    </script>
</body>
</html>
